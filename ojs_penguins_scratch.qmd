---
title: "Observable and Shiny"
format: 
  html:
    page-layout: full
server: shiny
---

## Integrating Observable JS and Shiny

[Observable](https://observablehq.com/) is a JavaScript based platform for the rapid visualization of data. It can be tied into Shiny through the use of Shiny reactives and the `ojs_define()` function in Shiny.

Inputs created in Observable (using `viewof`) are assigned into the `input` object in Shiny. In this example, our controls are acting as a filter for the `palmerpenguins` dataset. We use the value of the inputs within an reactive dataset to filter the dataset and return it as a reactive called `selectedData()`.

Observable Plot can directly work with the reactives we've defined with `ojs_define()`. Note that we have to `transpose()` `selectedData` for the data to be usable by Observable Plot. 


::: {.panel-sidebar}

```{ojs}
vars = cols
viewof xcol = Inputs.select(vars, {label: "X Variable", value: vars[0]})
viewof ycol = Inputs.select(vars, {label: "Y Variable", value: vars[1]})

viewof island = Inputs.checkbox(islands, {label: "Island", value: islands})

viewof bill_length_min = Inputs.range(
  [32, 50], 
  {value: 35, step: 1, label: "Bill length (min):"}
)
```
:::

::: {.panel-fill layout="[ [1,1], [1] ]"}

```{ojs}
Plot.rectY(transpose(selectedData), Plot.binX({y: "count"}, {x: xcol, fill: "species"})).plot()
```

```{ojs}
Plot.rect(transpose(selectedData), Plot.bin({fillOpacity: "count"}, {x: xcol, y: ycol, fill: "species"})).plot()
```

```{ojs}
import {SummaryTable} from "@observablehq/summary-table"

SummaryTable(transpose(selectedData))
```
:::


```{r}
#| context: server-start
library(readr)
library(ggplot2)
library(dplyr)
library(palmerpenguins)
library(tidyr)
data(penguins)

penguins <- penguins |>
  tidyr::drop_na(bill_depth_mm)
```

```{r}
#| context: server
cols <- reactive({penguins |> select(where(is.numeric)) |> colnames()})
islands <- reactive({
  penguins |> pull(island) |> as.character() |> unique()
  })

selectedData <- reactive({
  req(input$xcol)
  req(input$ycol)
  req(input$island)
  
  col_sel <- c(input$xcol, input$ycol)
  
  penguins |>
    filter(bill_length_mm > input$bill_length_min) |>
    filter(island %in% input$island)
})

ojs_define(selectedData, cols, islands)
```